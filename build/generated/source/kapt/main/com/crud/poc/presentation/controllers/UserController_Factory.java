// Generated by Dagger (https://dagger.dev).
package com.crud.poc.presentation.controllers;

import com.crud.poc.business.UserService;
import dagger.internal.Factory;
import io.ktor.application.ApplicationCall;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserController_Factory implements Factory<UserController> {
  private final Provider<ApplicationCall> callProvider;

  private final Provider<UserService> serviceProvider;

  public UserController_Factory(Provider<ApplicationCall> callProvider,
      Provider<UserService> serviceProvider) {
    this.callProvider = callProvider;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public UserController get() {
    return newInstance(callProvider.get(), serviceProvider.get());
  }

  public static UserController_Factory create(Provider<ApplicationCall> callProvider,
      Provider<UserService> serviceProvider) {
    return new UserController_Factory(callProvider, serviceProvider);
  }

  public static UserController newInstance(ApplicationCall call, UserService service) {
    return new UserController(call, service);
  }
}
